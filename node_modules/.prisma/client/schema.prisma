// Prisma schema for Brouwerij Klein Zwitserland webshop

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  ADMIN
  STAFF
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENT
  FIXED
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  role         AdminRole  @default(STAFF)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  auditLogs    AuditLog[]
}

model Customer {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  phone     String?
  addresses Address[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id         String    @id @default(cuid())
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId String?
  line1      String
  line2      String?
  postalCode String
  city       String
  country    String
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
  abv         Float?
  ibu         Int?
  volumeMl    Int?
  sku         String    @unique
  barcode     String?
  priceCents  Int
  currency    String    @default("EUR")
  taxRate     Decimal   @db.Decimal(5, 2) // percentage e.g. 21.00
  isPublished Boolean   @default(false)
  stock       Int       @default(0)
  images      String[]  @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  orderItems OrderItem[]
}

model Order {
  id                      String      @id @default(cuid())
  customer                Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId              String?
  email                   String
  status                  OrderStatus @default(PENDING)
  totalCents              Int
  currency                String      @default("EUR")
  taxCents                Int         @default(0)
  shippingCents           Int         @default(0)
  stripePaymentIntentId   String?
  stripeCheckoutSessionId String?

  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  shippingAddressId String?
  billingAddress    Address? @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  billingAddressId  String?

  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id             String  @id @default(cuid())
  order          Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  product        Product @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId      String
  name           String
  unitPriceCents Int
  quantity       Int
  subtotalCents  Int
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUser   User?    @relation(fields: [actorUserId], references: [id], onDelete: SetNull)
  actorUserId String?
  action      String
  targetType  String
  targetId    String
  metadata    Json
  createdAt   DateTime @default(now())
}

model DiscountCode {
  id         String       @id @default(cuid())
  code       String       @unique
  type       DiscountType
  value      Int // percent as integer for PERCENT, cents for FIXED
  activeFrom DateTime?
  activeTo   DateTime?
  usageLimit Int?
  timesUsed  Int          @default(0)
  isActive   Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
